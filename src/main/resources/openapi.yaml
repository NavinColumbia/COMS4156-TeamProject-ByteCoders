openapi: 3.0.3
info:
  title: PharmaId API
  description: PharmaId API for managing users, medications, and prescriptions.
  version: 1.0.0
servers:
  - url: https://bytecoders-coms4156.uk.r.appspot.com/
    description: Production server
  - url: http://localhost:8080/
    description: Development server

paths:
  /hello:
    get:
      operationId: getHelloMessage
      summary: Basic hello endpoint
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello :)"
        "500":
          description: Unexpected error encountered
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered"

  /register:
    post:
      operationId: registerUser
      summary: Register a new user
      description: Creates a new user account with the provided email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: User already exists for a provided email
          content:
            text/plain:
              schema:
                type: string
                example: "User already exists for this email"
        "500":
          description: Unexpected error encountered while registering a user
          content:
            text/plain:
              schema:
                type: string
                example: "Something went wrong"

  /login:
    post:
      operationId: loginUser
      summary: Login a user
      description: Authenticate a user with the provided email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
      responses:
        "200":
          description: Successful login attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserResponse"
        "401":
          description: Unauthorized login attempt
          content:
            text/plain:
              schema:
                type: string
                example: "Invalid email or password"
        "500":
          description: Unexpected server error encountered during login
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered during login"

  /medications:
    get:
      operationId: getMedications
      summary: Get all available medications
      description: Returns a list of medications currently available to create prescriptions for.
      responses:
        "200":
          description: Successful request to return a list of medications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Medication"
        "500":
          description: Unexpected error encountered during getting a list of medications
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered during getting a list of medications"

  /users/{userId}/prescriptions:
    post:
      operationId: createUserPrescription
      summary: Create a prescription for a user
      description: Returns a JSON response of the prescription created by a user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePrescriptionRequest"
      responses:
        "201":
          description: User prescription created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prescription"
        "404":
          $ref: "#/components/responses/UserDoesNotExist"
        "500":
          description: Unexpected error encountered while creating a prescription
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered while creating a prescription"
    get:
      operationId: getUserPrescriptions
      summary: Get prescriptions for a user
      description: Retrieves a JSON array of all prescriptions associated with the specified user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        "200":
          description: List of prescriptions for a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Prescription"
        "404":
          $ref: "#/components/responses/UserDoesNotExist"
        "500":
          description: Unexpected error encountered while getting user prescriptions
          content:
            text/plain:
              schema:
                type: string
                example: "Unexpected error encountered while getting user prescriptions"

  /share/request/{ownerId}:
    post:
      operationId: requestAccess
      summary: Request access to another user's prescriptions
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareRequest"
      responses:
        "201":
          description: Share request created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedPermission"
        "400":
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: "Cannot create shared permission with self"
                description: "Bad Request returned when owner raises request to his own prescriptions."

        "404":
          description: User not found
          content:
            text/plain:
              schema:
                type: string
                example: "User not found with ID : {id}"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"

  /share/{requestId}/accept:
    post:
      operationId: acceptRequest
      summary: Accepts a sharing request
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request accepted, success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedPermission"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Only Pending Requests can be accepted or denied"
        "403":
          description: Not authorized
          content:
            text/plain:
              schema:
                type: string
                example: "Not Authorized to accept or deny this request"
        "404":
          description: Request not found
          content:
            text/plain:
              schema:
                type: string
                example: "Request not found with id : {requestId}"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error."

  /share/{requestId}/deny:
    post:
      operationId: denyRequest
      summary: Deny a share request
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request denied, success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedPermission"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Only Pending Requests can be accepted or denied"
        "403":
          description: Not authorized
          content:
            text/plain:
              schema:
                type: string
                example: "Not Authorized to accept or deny this request"
        "404":
          description: Request not found
          content:
            text/plain:
              schema:
                type: string
                example: "Request not found with id : {requestId}"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"

  /share/{requestId}/revoke:
    post:
      operationId: revokeAccess
      summary: Revoke an accepted sharing permission
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Revoked Access, success
          content:
            text/plain:
              schema:
                type: string
                example: "Access revoked successfully"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Can only revoke already accepted shared permissions"
        "403":
          description: Not authorized
          content:
            text/plain:
              schema:
                type: string
                example: "Not Authorized to revoke this request"
        "404":
          description: Request not found
          content:
            text/plain:
              schema:
                type: string
                example: "Request not found with id : {requestId}"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Internal Server Error"


components:
  schemas:
    # User Attributes
    UserId:
      type: string
      description: Unique identifier for the user.
      example: "9101d183-26e6-45b7-a8c4-25f24fdb36fa"
      readOnly: true # immutable

    UserEmail:
      type: string
      format: email
      description: The email address of the user.
      example: "user@example.com"

    UserPassword:
      type: string
      description: A secure user password that will be hashed before storage.
      example: "securePassword123*"
      writeOnly: true # should not view password in responses

    UserJwtToken:
      type: string
      description: JWT token for user authentication
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # Medication Attributes
    MedicationId:
      type: string
      description: Unique identifier for the medication.
      example: "cb0a748d-78f5-4c39-8a4f-dc3b14254023"
      readOnly: true

    MedicationName:
      type: string
      description: Medication name.
      example: "Acetaminophen"

    # Prescription Attributes
    PrescriptionId:
      type: string
      description: Unique identifier for the prescription.
      example: "27b8d3b6-f101-478e-a9b5-d8d61d18e76e"
      readOnly: true

    PrescriptionDosage:
      type: integer
      description: Dosage amount. Units are overrated.
      example: 500

    PrescriptionNumOfDoses:
      type: integer
      description: Number of doses for a prescription.
      example: 3

    PrescriptionStartDate:
      type: string
      format: date
      description: The date the user started taking the prescription.
      example: "2024-01-01"

    PrescriptionEndDate:
      type: string
      format: date
      description: The date the user stopped taking the prescription.
      example: "2024-02-01"

    PrescriptionIsActive:
      type: boolean
      description: Whether the user is currently taking their prescription or not.
      example: true

    # Entity Models
    User:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
        email:
          $ref: "#/components/schemas/UserEmail"
        hashedPassword:
          $ref: "#/components/schemas/UserPassword"

    Medication:
      type: object
      properties:
        medicationId:
          $ref: "#/components/schemas/MedicationId"
        medicationName:
          $ref: "#/components/schemas/MedicationName"

    Prescription:
      type: object
      properties:
        prescriptionId:
          $ref: "#/components/schemas/PrescriptionId"
        medication:
          $ref: "#/components/schemas/Medication"
        dosage:
          $ref: "#/components/schemas/PrescriptionDosage"
        numOfDoses:
          $ref: "#/components/schemas/PrescriptionNumOfDoses"
        startDate:
          $ref: "#/components/schemas/PrescriptionStartDate"
        endDate:
          $ref: "#/components/schemas/PrescriptionEndDate"
        isActive:
          $ref: "#/components/schemas/PrescriptionIsActive"

    SharedPermission:
      type: object
      properties:
        id:
          type: string
          example: "27b8d3b6-f101-478e-a9b5-d8d61d18e76e"
        owner:
          $ref: "#/components/schemas/User"
        requester:
          $ref: "#/components/schemas/User"
        status:
          type: integer
          description: "Sharing request status 0 -> Pending, 1 -> Accepted, 2->Denied"
          example: 0
        permissionType:
          type: integer
          description: "Permission Type 0->View, 1->Edit"
          example: 0

    # Request Objects
    RegisterUserRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/UserEmail"
        password:
          $ref: "#/components/schemas/UserPassword"
      required:
        - email
        - password

    LoginUserRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/UserEmail"
        password:
          $ref: "#/components/schemas/UserPassword"
      required:
        - email
        - password

    LoginUserResponse:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserId"
        email:
          $ref: "#/components/schemas/UserEmail"
        token:
          type: string
          description: JWT token for user authentication
          example: "#/components/schemas/UserEmail"

    CreatePrescriptionRequest:
      properties:
        medicationId:
          $ref: "#/components/schemas/MedicationId"
        dosage:
          $ref: "#/components/schemas/PrescriptionDosage"
        numOfDoses:
          $ref: "#/components/schemas/PrescriptionNumOfDoses"
        startDate:
          $ref: "#/components/schemas/PrescriptionStartDate"
        endDate:
          $ref: "#/components/schemas/PrescriptionEndDate"
        isActive:
          $ref: "#/components/schemas/PrescriptionIsActive"
      type: object
      required:
        - medicationId
        - dosage
        - numOfDoses
        - startDate
        - isActive

    ShareRequest:
      type: object
      properties:
        permissionType:
          type: integer
          description: "Permission Type, 0->View, 1->Edit"
          example: 0
      required:
        - permissionType


  responses:
    UserDoesNotExist:
      description: Provided userId does not exist
      content:
        text/plain:
          schema:
            type: string
            example: "Provided userId does not exist"

    MedicationDoesNotExist:
      description: Provided medicationId does not exist
      content:
        text/plain:
          schema:
            type: string
            example: "Provided medicationId does not exist"




